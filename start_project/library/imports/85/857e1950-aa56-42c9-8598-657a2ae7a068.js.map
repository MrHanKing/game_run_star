{"version":3,"sources":["assets\\scripts\\player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpTime","maxMoveSpeed","accel","jumpAudio","default","url","AudioClip","setJumpAction","self","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","setInputControl","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","a","accLeft","accRight","d","onKeyReleased","node","onLoad","enabled","jumpAction","xSpeed","update","dt","Math","abs","x","sceneSizeW","game","getSceneSize","width","console","log","starMoveAt","pos","setPosition","runAction","stopMove","stopAllActions"],"mappings":"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","file":"unknown","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        //主角跳跃高度\r\n        jumpHeight:0,\r\n        //主角跳跃持续时间\r\n        jumpTime:0,\r\n        //最大移动速度\r\n        maxMoveSpeed:0,\r\n        //加速度\r\n        accel:0,\r\n        jumpAudio:{\r\n            default:null,\r\n            url:cc.AudioClip\r\n        },\r\n    },\r\n    \r\n    //跳跃\r\n    setJumpAction:function(){\r\n        //跳跃\r\n        var self = this;\r\n        var jumpUp = cc.moveBy(self.jumpTime, cc.p(0,self.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        //下落\r\n        var jumpDown = cc.moveBy(self.jumpTime, cc.p(0,-self.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        //设置音乐回调\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        //循环\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n    \r\n    //调用音乐函数\r\n    playJumpSound:function(){\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    \r\n    //设置输入控制\r\n    setInputControl:function(){\r\n        var self = this;\r\n        cc.eventManager.addListener({\r\n            event:cc.EventListener.KEYBOARD,\r\n            //按下键\r\n            onKeyPressed:function(keyCode,event){\r\n                switch(keyCode){\r\n                    case cc.KEY.a:\r\n                        self.accLeft = true;\r\n                        self.accRight = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accLeft = false;\r\n                        self.accRight = true;\r\n                        break;\r\n                }\r\n            },\r\n            //松开键\r\n            onKeyReleased:function(keyCode,event){\r\n                switch(keyCode){\r\n                    case cc.KEY.a:\r\n                        self.accLeft = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accRight = false;\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node)\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.enabled = false;\r\n        //初始化跳跃\r\n        this.jumpAction = this.setJumpAction();\r\n        \r\n        //加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        this.xSpeed = 0;\r\n        \r\n        //初始化键盘输入\r\n        this.setInputControl()\r\n    },\r\n    \r\n    update:function(dt){\r\n        //根据当前加速度方向每帧更新速度\r\n        if (this.accLeft){\r\n            //方向切换直接更改速度方向\r\n            this.xSpeed = (this.xSpeed > 0) ? -this.xSpeed:this.xSpeed;\r\n            this.xSpeed -= this.accel * dt;\r\n        } \r\n        else if (this.accRight){\r\n            this.xSpeed = (this.xSpeed < 0) ? -this.xSpeed:this.xSpeed;\r\n            this.xSpeed += this.accel * dt;\r\n        } \r\n        else {\r\n            //不按键时自衰减速度\r\n            this.xSpeed -= this.xSpeed * dt;\r\n            if (Math.abs(this.xSpeed) < 1){\r\n                this.xSpeed = 0;\r\n            }\r\n        }\r\n        //限制主角的最大速度\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed){\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        //根据速度更新主角位置\r\n        this.node.x += this.xSpeed * dt\r\n        // 场景行走区域判断\r\n        var sceneSizeW = this.game.getSceneSize().width;\r\n        console.log(\"sceneSizeW:\",sceneSizeW);\r\n        if (Math.abs(this.node.x) > sceneSizeW / 2 - this.node.width / 2) {\r\n            this.node.x = (sceneSizeW / 2 - this.node.width / 2) * this.node.x / Math.abs(this.node.x);\r\n        }\r\n    },\r\n\r\n    starMoveAt:function(pos){\r\n        this.enabled = true;\r\n        this.xSpeed = 0;\r\n        this.node.setPosition(pos);\r\n        this.node.runAction(this.jumpAction);\r\n    },\r\n\r\n    stopMove:function(){\r\n        this.node.stopAllActions();\r\n    }\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"]}